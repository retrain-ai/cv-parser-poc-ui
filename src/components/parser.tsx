"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/ahkLw0FaDkg
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import FileInput from "./FileUpload/FileUpload";
import { useState } from "react";
import { analyze } from "../app/api/analyze/document-analyze";
import { CVPreview } from "./CvPreview/CvPreview";
import { JsonViewer } from "./JsonPreview/JsonPreview";
import { Spinner } from "./Spinner/Spinner";

export function Parser() {
  const [file, setFile] = useState<File | null>(null);
  const [parsedCv, setParsed] = useState<object | null>(null);
  const [loading, setLoading] = useState(false);

  const onClick = async () => {
    if (file) {
      const formData = new FormData();
      formData.append("file", file, file.name);
      setLoading(true);
      try {
        const r = await analyze(formData);
        setLoading(false);
        r.parsed = JSON.parse(r.parsed || "{}");
        setParsed(r);
        console.log(r);
      } catch (e) {
        setLoading(false);
        console.error(e);
        setParsed({ error: (e as Error).message });
      }
    }
  };
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 min-w-fit mx-auto p-4 md:p-6 xl:px-36">
      <div className="grid grid-rows-[30%_70%] gap-6 h-screen">
        <div className="bg-muted rounded-lg p-4 md:p-6 flex flex-col justify-center">
          <h2 className="text-2xl font-bold mb-4">Upload PDF</h2>
          <div className="flex gap-2">
            <FileInput onFileSelect={setFile} />
            {/* <Input type="file" /> */}
            <Button onClick={onClick} disabled={loading}>
              Parse!
            </Button>
          </div>
        </div>
        <div className="bg-muted rounded-lg p-4 md:p-6 overflow-auto flex flex-col">
          <h2 className="text-2xl font-bold mb-4">JSON Response</h2>
          <div className="justify-center items-center justify-items-center flex flex-grow">
            {<Spinner loading={loading} />}
            {!loading && parsedCv ? (
              <JsonViewer data={parsedCv}></JsonViewer>
            ) : (
              <></>
            )}
          </div>
        </div>
      </div>
      <div className="bg-muted rounded-lg overflow-hidden">
        <div className="p-4 md:p-6 h-full">
          <CVPreview file={file || undefined} />
        </div>
      </div>
    </div>
  );
}
